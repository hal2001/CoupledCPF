// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// compute_cost1_
NumericMatrix compute_cost1_(const NumericVector& x, const NumericVector& y);
RcppExport SEXP CoupledPF_compute_cost1_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    __result = Rcpp::wrap(compute_cost1_(x, y));
    return __result;
END_RCPP
}
// compute_cost2_
NumericMatrix compute_cost2_(const NumericVector& x, const NumericVector& y);
RcppExport SEXP CoupledPF_compute_cost2_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    __result = Rcpp::wrap(compute_cost2_(x, y));
    return __result;
END_RCPP
}
// cost_matrix_
NumericMatrix cost_matrix_(const NumericMatrix& x, const NumericMatrix& y);
RcppExport SEXP CoupledPF_cost_matrix_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    __result = Rcpp::wrap(cost_matrix_(x, y));
    return __result;
END_RCPP
}
// square_cost_matrix_
NumericMatrix square_cost_matrix_(const NumericMatrix& x, const NumericMatrix& y);
RcppExport SEXP CoupledPF_square_cost_matrix_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    __result = Rcpp::wrap(square_cost_matrix_(x, y));
    return __result;
END_RCPP
}
// create_A_
NumericMatrix create_A_(double alpha, int d);
RcppExport SEXP CoupledPF_create_A_(SEXP alphaSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    __result = Rcpp::wrap(create_A_(alpha, d));
    return __result;
END_RCPP
}
// hilbert_order_
NumericVector hilbert_order_(NumericMatrix x);
RcppExport SEXP CoupledPF_hilbert_order_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = Rcpp::wrap(hilbert_order_(x));
    return __result;
END_RCPP
}
// kalman_loglikelihood_
double kalman_loglikelihood_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_loglikelihood_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_loglikelihood_(parameters, observations));
    return __result;
END_RCPP
}
// kalman_filtering_means_
NumericMatrix kalman_filtering_means_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_filtering_means_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_filtering_means_(parameters, observations));
    return __result;
END_RCPP
}
// kalman_smoothing_means_
NumericMatrix kalman_smoothing_means_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_smoothing_means_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_smoothing_means_(parameters, observations));
    return __result;
END_RCPP
}
// malikpitt_
NumericVector malikpitt_(const NumericVector& xparticles, const NumericVector& weights, double u);
RcppExport SEXP CoupledPF_malikpitt_(SEXP xparticlesSEXP, SEXP weightsSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    __result = Rcpp::wrap(malikpitt_(xparticles, weights, u));
    return __result;
END_RCPP
}
// rmvnorm
NumericMatrix rmvnorm(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_rmvnorm(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(rmvnorm(nsamples, mean, covariance));
    return __result;
END_RCPP
}
// dmvnorm
NumericVector dmvnorm(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(dmvnorm(x, mean, covariance));
    return __result;
END_RCPP
}
// one_step_pz_
NumericVector one_step_pz_(double P, double Z, double t, double alpha, double c, double e, double ml, double mq);
RcppExport SEXP CoupledPF_one_step_pz_(SEXP PSEXP, SEXP ZSEXP, SEXP tSEXP, SEXP alphaSEXP, SEXP cSEXP, SEXP eSEXP, SEXP mlSEXP, SEXP mqSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< double >::type e(eSEXP);
    Rcpp::traits::input_parameter< double >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< double >::type mq(mqSEXP);
    __result = Rcpp::wrap(one_step_pz_(P, Z, t, alpha, c, e, ml, mq));
    return __result;
END_RCPP
}
// one_step_pz_vector
NumericMatrix one_step_pz_vector(NumericMatrix xparticles, NumericVector alphas, double t, NumericVector parameters);
RcppExport SEXP CoupledPF_one_step_pz_vector(SEXP xparticlesSEXP, SEXP alphasSEXP, SEXP tSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    __result = Rcpp::wrap(one_step_pz_vector(xparticles, alphas, t, parameters));
    return __result;
END_RCPP
}
// systematic_resampling_n_
IntegerVector systematic_resampling_n_(const NumericVector& weights, int ndraws, double u);
RcppExport SEXP CoupledPF_systematic_resampling_n_(SEXP weightsSEXP, SEXP ndrawsSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    __result = Rcpp::wrap(systematic_resampling_n_(weights, ndraws, u));
    return __result;
END_RCPP
}
// wasserstein_auto_
List wasserstein_auto_(NumericVector p_, NumericVector q_, NumericMatrix cost_matrix_, double epsilon, double desired_alpha);
RcppExport SEXP CoupledPF_wasserstein_auto_(SEXP p_SEXP, SEXP q_SEXP, SEXP cost_matrix_SEXP, SEXP epsilonSEXP, SEXP desired_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cost_matrix_(cost_matrix_SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type desired_alpha(desired_alphaSEXP);
    __result = Rcpp::wrap(wasserstein_auto_(p_, q_, cost_matrix_, epsilon, desired_alpha));
    return __result;
END_RCPP
}
// wasserstein_
List wasserstein_(NumericVector p_, NumericVector q_, NumericMatrix cost_matrix_, double epsilon, int niterations);
RcppExport SEXP CoupledPF_wasserstein_(SEXP p_SEXP, SEXP q_SEXP, SEXP cost_matrix_SEXP, SEXP epsilonSEXP, SEXP niterationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cost_matrix_(cost_matrix_SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type niterations(niterationsSEXP);
    __result = Rcpp::wrap(wasserstein_(p_, q_, cost_matrix_, epsilon, niterations));
    return __result;
END_RCPP
}
